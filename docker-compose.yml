services:
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: jlstore-mssql
    restart: unless-stopped
    ports:
      - "1433:1433"
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: ${MSSQL_SA_PASSWORD}
      MSSQL_PID: "Developer"
    volumes:
      - mssqldata:/var/opt/mssql
    healthcheck:
      # ATTENZIONE: la toolchain sqlcmd potrebbe non essere presente nell'immagine base.
      # Se fallisce il healthcheck, togli il blocco healthcheck o usa un metodo diverso.
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P \"$${MSSQL_SA_PASSWORD}\" -C -Q \"SELECT 1\" || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 30

  jlstore-app:
    build:
      context: .
      dockerfile: ./Containerfile   # <- usa proprio "containerfile" (minuscolo), perché il file che hai è minuscolo
    container_name: jlstore-app
    depends_on:
      mssql:
        condition: service_healthy
    environment:
      ASPNETCORE_URLS: "https://+:7250;http://+:5250"
      ASPNETCORE_ENVIRONMENT: "Development"
      ConnectionStrings__Default: "Server=mssql,1433;Database=jlstore;User Id=sa;Password=${MSSQL_SA_PASSWORD};Encrypt=True;TrustServerCertificate=True;MultipleActiveResultSets=True"
      ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
      ASPNETCORE_Kestrel__Certificates__Default__Password: "devcert"
    volumes:
      - devcerts:/https
    ports:
      - "5250:5250"
      - "7250:7250"
    restart: unless-stopped

  # opzionale: genera il certificato dev la prima volta
  devcert-init:
    image: mcr.microsoft.com/dotnet/sdk:9.0
    command: bash -lc "mkdir -p /https && (dotnet dev-certs https -ep /https/aspnetapp.pfx -p devcert -q) || true"
    volumes:
      - devcerts:/https
    restart: "no"

volumes:
  mssqldata:
  devcerts:
